plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'groovy'
    // id 'maven-publish'
    // id 'signing'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
}

group = 'com.latam'
version = '1.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    springBootVersion = '3.5.6'
    springDataVersion = '3.3.6'
    jacksonVersion = '2.17.2'
    lombokVersion = '1.18.34'
    spockVersion = '2.4-M4-groovy-4.0'
    testcontainersVersion = '1.20.4'
    h2Version = '2.3.232'
    hsqldbVersion = '2.7.4'
}

dependencies {
    // Spring Boot Core
    api "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    api "org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor:${springBootVersion}"
    
    // YAML Processing
    api "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    api "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    api "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    api "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    
    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    
    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    
    // Logging
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    
    // Optional dependencies para soporte completo
    compileOnly 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    compileOnly 'org.hibernate:hibernate-core:6.6.1.Final'
    
    // Test Dependencies
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-test-autoconfigure:${springBootVersion}"
    
    // Spock Framework
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
    testImplementation 'org.apache.groovy:groovy-all:4.0.22'
    
    // Testcontainers
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:spock:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:mysql:${testcontainersVersion}"
	testImplementation "mysql:mysql-connector-java:8.0.33"
	testImplementation "org.postgresql:postgresql:42.6.0"
	
    
    // Test Databases
    testImplementation "com.h2database:h2:${h2Version}"
    testImplementation "org.hsqldb:hsqldb:${hsqldbVersion}"
    testRuntimeOnly "com.h2database:h2:${h2Version}"
    
    // Test Support
    testImplementation 'org.springframework:spring-test'
//    testImplementation 'org.assertj:assertj-core'
}


bootJar {
	enabled = false
}

jar {
	enabled = true
}

// Configuración para tests con Spock
test {
	forkEvery = 1
	maxHeapSize = "2g"
	
    useJUnitPlatform {
        includeEngines 'junit-jupiter', 'spock'
    }
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }
    
    // Configuración para Testcontainers
    systemProperty 'testcontainers.reuse.enable', 'true'
    
    finalizedBy jacocoTestReport
}

// JaCoCo Coverage
jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/config/**',
                '**/configuration/**',
                '**/*Config.class',
                '**/*Configuration.class',
                '**/*Properties.class',
                '**/*Application.class'
            ])
        }))
    }
}

// Configuración de publicación
// publishing {
//     publications {
//         maven(MavenPublication) {
//             from components.java
            
//             pom {
//                 name = 'Spring Dynamic Query Starter'
//                 description = 'A Spring Boot starter for dynamic SQL queries with YAML configuration, providing MyBatis-like functionality with Spring Data JPA'
//                 url = 'https://github.com/latam/spring-dynamic-query-starter'
                
//                 licenses {
//                     license {
//                         name = 'Apache License 2.0'
//                         url = 'https://www.apache.org/licenses/LICENSE-2.0'
//                     }
//                 }
                
//                 developers {
//                     developer {
//                         id = 'latam'
//                         name = 'LATAM Development Team'
//                         email = 'dev@latam.com'
//                     }
//                 }
                
//                 scm {
//                     connection = 'scm:git:git://github.com/latam/spring-dynamic-query-starter.git'
//                     developerConnection = 'scm:git:ssh://github.com/latam/spring-dynamic-query-starter.git'
//                     url = 'https://github.com/latam/spring-dynamic-query-starter'
//                 }
//             }
//         }
//     }
    
//     repositories {
//         maven {
//             name = "OSSRH"
//             url = version.endsWith('-SNAPSHOT') ? 
//                 'https://oss.sonatype.org/content/repositories/snapshots/' : 
//                 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
//             credentials {
//                 username = project.findProperty("ossrhUsername") ?: ""
//                 password = project.findProperty("ossrhPassword") ?: ""
//             }
//         }
//     }
// }

// Firma de artefactos para Maven Central
// signing {
//     required { gradle.taskGraph.hasTask("publish") }
//     sign publishing.publications.maven
// }

// Configuración de compilación
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
        '-parameters',
        '-Xlint:all',
        '-Xlint:-processing'
    ]
}

compileTestJava {
    options.encoding = 'UTF-8'
}

// Configuración de SonarQube (opcional)
sonarqube {
    properties {
        property "sonar.projectKey", "spring-dynamic-query-starter"
        property "sonar.projectName", "Spring Dynamic Query Starter"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportPaths", "${buildDir}/test-results/test"
        property "sonar.java.source", "21"
    }
}

// Task para generar documentación
task generateDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("${buildDir}/docs/javadoc")
    
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        author = true
        version = true
        use = true
        windowTitle = "Spring Dynamic Query Starter ${version} API"
        docTitle = "Spring Dynamic Query Starter ${version} API"
    }
}

// Configuración de wrapper
wrapper {
    gradleVersion = '8.14.3'
    distributionType = Wrapper.DistributionType.BIN
}

// Configuración adicional para desarrollo
configurations.configureEach {
    resolutionStrategy {
        // Forzar versiones específicas si hay conflictos
        force "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        force "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
        
        // Cache dinámico de versiones
        cacheDynamicVersionsFor 10, 'minutes'
        cacheChangingModulesFor 0, 'seconds'
    }
}

// Task para ejecutar todos los checks
task checkAll {
    dependsOn check, jacocoTestReport, generateDocs
    description = "Runs all quality checks and generates reports"
}